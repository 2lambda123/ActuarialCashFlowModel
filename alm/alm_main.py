# -*- coding: utf-8 -*-
"""
Created on Mon Jul 25 22:57:32 2016

@author: Quang Dien DUONG
"""
## Program packages
from .ALM import ALM
from ..liability.Technical_Provision import Technical_Provision
from ..liability.Liabilities import Liabilities
from ..asset.Assets import Assets
from ..asset.bond.Bonds_Portfolio import Bonds_Portfolio
from .Balance_Sheets import Balance_Sheets
from ..core_math import excel_toolbox as et
## Python packages
import pickle
import numpy as np
import xlwings as xw
import collections


Working_URL = r'Feuille_de_calcul_ALM(Working).xlsm'



def Compute_BEL(balance_sheet = True, modif = False):
    ESG = None
    if modif:
        with open(r'data\pickle\modif_ESG_updated.pkl', 'rb') as input:
            ESG = pickle.load(input)
    else: 
        with open(r'data\pickle\ESG_updated.pkl', 'rb') as input:
            ESG = pickle.load(input)    
        
    nb_traj = int(xw.sheets['ALM'].range('D1').value)
    time_horizon = int(xw.sheets['ALM'].range('D3').value)
    assert nb_traj <= ESG.number_trajectories, "More economic scenarios generated by ESG are required in order to compute Best-Estimate Liabilities"
    assert time_horizon <= ESG.time_horizon, "ESG projection horizon must be larger than ALM projection horizon"
    
    spot_rates = ESG.asset_data.get_list_market(ESG.market_name).spot_rates
    #initial_deflator = np.power(1./np.add(1,spot_rates), np.arange(1, len(spot_rates)+1))
    
    own_fund = xw.sheets['ALM'].range('C12').value
    capitalization_reserve = xw.sheets['ALM'].range('C14').value
    PRE = xw.sheets['ALM'].range('C16').value
    profit_sharing_reserve = xw.sheets['ALM'].range('C18').value
    
    
    # =====================================================================================================
    # Test version of Liabilities_data
    with open(r'data\pickle\Liabilities_data0.pkl', 'rb') as input:
        data = pickle.load(input)
    # =====================================================================================================
    #with open(r'C:\Users\FR011526\Documents\ALM_QDD_Interface_Excel\Liabilities_data1.pkl', 'rb') as input:
    #    data = pickle.load(input)
        
    PM0 = 0
    for mdlp in data.model_points:
        PM0 += mdlp.actual_math_provision
    
    if not modif:
        # Display the 'bilan comptable'
        xw.sheets['ALM'].range('O12').value = own_fund
        xw.sheets['ALM'].range('O13').value = capitalization_reserve
        xw.sheets['ALM'].range('O14').value = PRE
        xw.sheets['ALM'].range('O15').value = profit_sharing_reserve
        xw.sheets['ALM'].range('O20').value = PM0
        xw.sheets['ALM'].range('N18').value = own_fund + capitalization_reserve + PRE + profit_sharing_reserve + PM0
    
    allocation_EQ = xw.sheets['ALM'].range('C30').value
    allocation_bond = xw.sheets['ALM'].range('C32').value
    
    # ===================================================
    # update rating target allocation
    # ===================================================
    target_allocation = np.asarray(xw.sheets['Rating Target Allocation'].range('C3:V9').value)   
    
    
    deterministic = xw.sheets['ALM'].range('D23').value
    assert type(deterministic) == bool, "deterministic must be a boolean TRUE or FALSE"
    
    BEL = []
    Asset0 = own_fund + capitalization_reserve + PRE + profit_sharing_reserve
    for traj in range(nb_traj):
        with open(r'data\pickle\Liabilities_data0.pkl', 'rb') as input:
            data = pickle.load(input)
        profit_sharing_reserve = profit_sharing_reserve
        technical_provision = Technical_Provision()
        technical_provision.update(profit_sharing_reserve = profit_sharing_reserve)
        # ==========================================
        # Initialize Liabilities
        # ==========================================
        liabilities = Liabilities()
        liabilities.update(capitalization_reserve = capitalization_reserve, technical_provision = technical_provision, own_fund = own_fund, PRE = PRE, liabilities_data = data)
        # ==========================================
        # Initialize Assets
        # ==========================================
        generator = ESG        
        # Initialize Bond Portfolios
        bonds_portfolio = Bonds_Portfolio(time_horizon=time_horizon, ESG_RN_scenarios_traj_i = ESG.scenarios[traj], target_allocation= target_allocation, init_IR_curve=spot_rates)
        bonds_portfolio.initialize_unit_bonds_book_value()
        bonds_portfolio.initialize_unit_bonds_market_value()
        
        assets = Assets(generator, bonds_portfolio)
        # ================================================================================================================================================
        # By default, the initial profit sharing rate is supposed to be TME_0, so there is no any dynamical surrenders during the first year of projection
        # If the initial profit sharing rate is known previously, then it can be modified within the following section
        # ================================================================================================================================================
        for mdlp in liabilities.liabilities_data.model_points:
            mdlp.profit_sharing_rate[0] = mdlp.TMG[mdlp.seniority]
        # ==========================================
        # Initialize ALM
        # ==========================================
        alm = ALM(assets, liabilities, time_horizon)
        # ==========================================
        # Set up asset allocation
        # ==========================================
        alm.assets.add_allocation(allocation_EQ = allocation_EQ, allocation_bond = allocation_bond)
        value = alm.liabilities.technical_provision.mathematical_provision[0]
        alm.assets.initialize_EQ_value(value = assets.allocations['EQ']*value)
        alm.assets.bonds.initialize_allocation(amount=assets.allocations['bonds']*value)
        # ===============================
        # Set up deflators
        # ===============================
        alm.assets.deflators = alm.assets.ESG_RN.scenarios[traj]['Deflators']
        # ==============================
        #          Cash
        # ==============================
        alm.assets.add_cash(amount = alm.assets.allocations['cash'] * value)
        # ================================
        # Display 'Actifs en valeur de marchÃ©'
        if traj == 0:
            Asset0 += alm.assets.cash[0] + alm.assets.EQ_market_value[0] + alm.assets.get_bond_market_value(0)
            if not modif:
                xw.sheets['ALM'].range('S18').clear_contents()
                xw.sheets['ALM'].range('S18').value = Asset0
        # ================================
        # Initialize Balance Sheet
        # ================================
        BS = Balance_Sheets()
        BS.update(key_lv1 = 'assets', key_lv2 = 'cash', value = alm.assets.cash[0])
        BS.update(key_lv1 = 'assets', key_lv2 = 'equity', value = alm.assets.EQ_book_value[0])
        BS.update(key_lv1 = 'assets', key_lv2 = 'bond', value = alm.assets.get_bond_book_value(valuation_date = 0))
        BS.update(key_lv1 = 'liabilities', key_lv2 = 'own_fund', value = liabilities.own_fund[0])
        BS.update(key_lv1 = 'liabilities', key_lv2 = 'capitalization_reserve', value = liabilities.capitalization_reserve[0])
        BS.update(key_lv1 = 'liabilities', key_lv2 = 'profit_sharing_reserve', value = liabilities.technical_provision.profit_sharing_reserve[0])
        BS.update(key_lv1 = 'liabilities', key_lv2 = 'PRE', value = liabilities.PRE[0])
        BS.update(key_lv1 = 'liabilities', key_lv2 = 'mathematical_provision', value = liabilities.technical_provision.mathematical_provision[0])
        alm.balance_sheets.append(BS)
        # ==================================
        # Main Part
        # Compute BEL
        # ==================================
        resu, resu_own_fund, discount_factor, cash_flow_out, trajectory = alm.compute_BEL_cashflows_scenario(traj_i = traj, deterministic = deterministic)
        BEL.append(resu)
        
    if modif:
        output = np.mean(BEL)
    else:
        xw.sheets['ALM'].range('L2').clear_contents()
        output = np.mean(BEL)
        xw.sheets['ALM'].range('L2').value = output
        xw.sheets['ALM'].range('T20').value = output
        xw.sheets['ALM'].range('T13').value = Asset0 - output
    # ===============================
    # Save Balance Sheets to excel
    # ===============================
    # At the begining of period
    # ===============================
    if balance_sheet:
        cash_0_list = [alm.balance_sheets[time_step].get_value('assets','cash_0') for time_step in range (1, alm.time_horizon)]
        equity_market_0_list = [alm.balance_sheets[time_step].get_value('assets', 'equity_market_value_0') for time_step in range(1, alm.time_horizon)]
        equity_bond_0_list = [alm.balance_sheets[time_step].get_value('assets', 'equity_book_value_0') for time_step in range(1, alm.time_horizon)]
        bond_market_0_list = [alm.balance_sheets[time_step].get_value('assets', 'bond_market_value_0') for time_step in range(1, alm.time_horizon)]
        bond_book_0_list = [alm.balance_sheets[time_step].get_value('assets', 'bond_book_value_0') for time_step in range(1, alm.time_horizon)]
        PMVR_action_0_list = [alm.balance_sheets[time_step].get_value('assets', 'PMVR_action_0') for time_step in range(1, alm.time_horizon)]
        PMVR_obligation_0_list = [alm.balance_sheets[time_step].get_value('assets', 'PMVR_obligation_0') for time_step in range(1, alm.time_horizon)]
        available_wealth_0_list = [alm.balance_sheets[time_step].get_value('assets', 'available_wealth_0') for time_step in range(1, alm.time_horizon)]
        own_fund_0_list = [alm.balance_sheets[time_step].get_value('liabilities', 'own_fund_0') for time_step in range(1, alm.time_horizon)]
        capitalization_reserve_0_list = [alm.balance_sheets[time_step].get_value('liabilities', 'capitalization_reserve_0') for time_step in range(1, alm.time_horizon)]
        PRE_0_list = [alm.balance_sheets[time_step].get_value('liabilities','PRE_0') for time_step in range(1, alm.time_horizon)]
        PPE_0_list = [alm.balance_sheets[time_step].get_value('liabilities', 'profit_sharing_reserve_0') for time_step in range(1, alm.time_horizon)]
        PM_0_list = [alm.balance_sheets[time_step].get_value('liabilities', 'mathematical_provision_0') for time_step in range(1, alm.time_horizon)]
        # ============================================
        # After the bond_reinvestment
        # ============================================
        cash_1_list = [alm.balance_sheets[time_step].get_value('assets','cash_1') for time_step in range (1, alm.time_horizon)]
        equity_market_1_list = [alm.balance_sheets[time_step].get_value('assets', 'equity_market_value_1') for time_step in range(1, alm.time_horizon)]
        equity_bond_1_list = [alm.balance_sheets[time_step].get_value('assets', 'equity_book_value_1') for time_step in range(1, alm.time_horizon)]
        bond_market_1_list = [alm.balance_sheets[time_step].get_value('assets', 'bond_market_value_1') for time_step in range(1, alm.time_horizon)]
        bond_book_1_list = [alm.balance_sheets[time_step].get_value('assets', 'bond_book_value_1') for time_step in range(1, alm.time_horizon)]
        PMVR_action_1_list = [alm.balance_sheets[time_step].get_value('assets', 'PMVR_action_1') for time_step in range(1, alm.time_horizon)]
        PMVR_obligation_1_list = [alm.balance_sheets[time_step].get_value('assets', 'PMVR_obligation_1') for time_step in range(1, alm.time_horizon)]
        available_wealth_1_list = [alm.balance_sheets[time_step].get_value('assets', 'available_wealth_1') for time_step in range(1, alm.time_horizon)]
        own_fund_1_list = [alm.balance_sheets[time_step].get_value('liabilities', 'own_fund_1') for time_step in range(1, alm.time_horizon)]
        capitalization_reserve_1_list = [alm.balance_sheets[time_step].get_value('liabilities', 'capitalization_reserve_1') for time_step in range(1, alm.time_horizon)]
        PPE_1_list = [alm.balance_sheets[time_step].get_value('liabilities', 'profit_sharing_reserve_1') for time_step in range(1, alm.time_horizon)]
        PM_1_list = [alm.balance_sheets[time_step].get_value('liabilities', 'mathematical_provision_1') for time_step in range(1, alm.time_horizon)]
        # ============================================
        # After computing amortizing value
        # ============================================
        cash_2_list = [alm.balance_sheets[time_step].get_value('assets','cash_2') for time_step in range (1, alm.time_horizon)]
        equity_market_2_list = [alm.balance_sheets[time_step].get_value('assets', 'equity_market_value_2') for time_step in range(1, alm.time_horizon)]
        equity_bond_2_list = [alm.balance_sheets[time_step].get_value('assets', 'equity_book_value_2') for time_step in range(1, alm.time_horizon)]
        bond_market_2_list = [alm.balance_sheets[time_step].get_value('assets', 'bond_market_value_2') for time_step in range(1, alm.time_horizon)]
        bond_book_2_list = [alm.balance_sheets[time_step].get_value('assets', 'bond_book_value_2') for time_step in range(1, alm.time_horizon)]
        PMVR_action_2_list = [alm.balance_sheets[time_step].get_value('assets', 'PMVR_action_2') for time_step in range(1, alm.time_horizon)]
        PMVR_obligation_2_list = [alm.balance_sheets[time_step].get_value('assets', 'PMVR_obligation_2') for time_step in range(1, alm.time_horizon)]
        available_wealth_2_list = [alm.balance_sheets[time_step].get_value('assets', 'available_wealth_2') for time_step in range(1, alm.time_horizon)]
        own_fund_2_list = [alm.balance_sheets[time_step].get_value('liabilities', 'own_fund_2') for time_step in range(1, alm.time_horizon)]
        capitalization_reserve_2_list = [alm.balance_sheets[time_step].get_value('liabilities', 'capitalization_reserve_2') for time_step in range(1, alm.time_horizon)]
        PPE_2_list = [alm.balance_sheets[time_step].get_value('liabilities', 'profit_sharing_reserve_2') for time_step in range(1, alm.time_horizon)]
        PM_2_list = [alm.balance_sheets[time_step].get_value('liabilities', 'mathematical_provision_2') for time_step in range(1, alm.time_horizon)]
        # ============================================
        # After paying surrenders out
        # ============================================
        cash_3_list = [alm.balance_sheets[time_step].get_value('assets','cash_3') for time_step in range (1, alm.time_horizon)]
        equity_market_3_list = [alm.balance_sheets[time_step].get_value('assets', 'equity_market_value_3') for time_step in range(1, alm.time_horizon)]
        equity_bond_3_list = [alm.balance_sheets[time_step].get_value('assets', 'equity_book_value_3') for time_step in range(1, alm.time_horizon)]
        bond_market_3_list = [alm.balance_sheets[time_step].get_value('assets', 'bond_market_value_3') for time_step in range(1, alm.time_horizon)]
        bond_book_3_list = [alm.balance_sheets[time_step].get_value('assets', 'bond_book_value_3') for time_step in range(1, alm.time_horizon)]
        PMVR_action_3_list = [alm.balance_sheets[time_step].get_value('assets', 'PMVR_action_3') for time_step in range(1, alm.time_horizon)]
        PMVR_obligation_3_list = [alm.balance_sheets[time_step].get_value('assets', 'PMVR_obligation_3') for time_step in range(1, alm.time_horizon)]
        available_wealth_3_list = [alm.balance_sheets[time_step].get_value('assets', 'available_wealth_3') for time_step in range(1, alm.time_horizon)]
        own_fund_3_list = [alm.balance_sheets[time_step].get_value('liabilities', 'own_fund_3') for time_step in range(1, alm.time_horizon)]
        capitalization_reserve_3_list = [alm.balance_sheets[time_step].get_value('liabilities', 'capitalization_reserve_3') for time_step in range(1, alm.time_horizon)]
        PPE_3_list = [alm.balance_sheets[time_step].get_value('liabilities', 'profit_sharing_reserve_3') for time_step in range(1, alm.time_horizon)]
        PM_3_list = [alm.balance_sheets[time_step].get_value('liabilities', 'mathematical_provision_3') for time_step in range(1, alm.time_horizon)]
        # ============================================
        # After paying mortalities out
        # ============================================
        cash_4_list = [alm.balance_sheets[time_step].get_value('assets','cash_4') for time_step in range (1, alm.time_horizon)]
        equity_market_4_list = [alm.balance_sheets[time_step].get_value('assets', 'equity_market_value_4') for time_step in range(1, alm.time_horizon)]
        equity_bond_4_list = [alm.balance_sheets[time_step].get_value('assets', 'equity_book_value_4') for time_step in range(1, alm.time_horizon)]
        bond_market_4_list = [alm.balance_sheets[time_step].get_value('assets', 'bond_market_value_4') for time_step in range(1, alm.time_horizon)]
        bond_book_4_list = [alm.balance_sheets[time_step].get_value('assets', 'bond_book_value_4') for time_step in range(1, alm.time_horizon)]
        PMVR_action_4_list = [alm.balance_sheets[time_step].get_value('assets', 'PMVR_action_4') for time_step in range(1, alm.time_horizon)]
        PMVR_obligation_4_list = [alm.balance_sheets[time_step].get_value('assets', 'PMVR_obligation_4') for time_step in range(1, alm.time_horizon)]
        available_wealth_4_list = [alm.balance_sheets[time_step].get_value('assets', 'available_wealth_4') for time_step in range(1, alm.time_horizon)]
        own_fund_4_list = [alm.balance_sheets[time_step].get_value('liabilities', 'own_fund_4') for time_step in range(1, alm.time_horizon)]
        capitalization_reserve_4_list = [alm.balance_sheets[time_step].get_value('liabilities', 'capitalization_reserve_4') for time_step in range(1, alm.time_horizon)]
        PPE_4_list = [alm.balance_sheets[time_step].get_value('liabilities', 'profit_sharing_reserve_4') for time_step in range(1, alm.time_horizon)]
        PM_4_list = [alm.balance_sheets[time_step].get_value('liabilities', 'mathematical_provision_4') for time_step in range(1, alm.time_horizon)]
        # ============================================
        # After computing distributed wealth
        # ============================================
        richesse_max_list = [alm.balance_sheets[time_step].get_value('assets','richesse_max') for time_step in range (1, alm.time_horizon)]
        richesse_min_list = [alm.balance_sheets[time_step].get_value('assets','richesse_min') for time_step in range (1, alm.time_horizon)]
        richesse_TMG_list = [alm.balance_sheets[time_step].get_value('assets','richesse_TMG') for time_step in range (1, alm.time_horizon)]
        richesse_voulue_list = [alm.balance_sheets[time_step].get_value('assets','richesse_voulue') for time_step in range (1, alm.time_horizon)]
        abondement_list = [alm.balance_sheets[time_step].get_value('assets','abondement') for time_step in range (1, alm.time_horizon)]
        richesse_distribuee_list = [alm.balance_sheets[time_step].get_value('assets','richesse_distribuee') for time_step in range (1, alm.time_horizon)]
        equity_market_5_list = [alm.balance_sheets[time_step].get_value('assets', 'equity_market_value_5') for time_step in range(1, alm.time_horizon)]
        bond_market_5_list = [alm.balance_sheets[time_step].get_value('assets', 'bond_market_value_5') for time_step in range(1, alm.time_horizon)]
        PMVR_action_5_list = [alm.balance_sheets[time_step].get_value('assets', 'PMVR_action_5') for time_step in range(1, alm.time_horizon)]
        PMVR_obligation_5_list = [alm.balance_sheets[time_step].get_value('assets', 'PMVR_obligation_5') for time_step in range(1, alm.time_horizon)]
        available_wealth_5_list = [alm.balance_sheets[time_step].get_value('assets', 'available_wealth_5') for time_step in range(1, alm.time_horizon)]
        own_fund_5_list = [alm.balance_sheets[time_step].get_value('liabilities', 'own_fund_5') for time_step in range(1, alm.time_horizon)]
        capitalization_reserve_5_list = [alm.balance_sheets[time_step].get_value('liabilities', 'capitalization_reserve_5') for time_step in range(1, alm.time_horizon)]
        PPE_5_list = [alm.balance_sheets[time_step].get_value('liabilities', 'profit_sharing_reserve_5') for time_step in range(1, alm.time_horizon)]
        PM_5_list = [alm.balance_sheets[time_step].get_value('liabilities', 'mathematical_provision_5') for time_step in range(1, alm.time_horizon)]
        # ============================================
        # Traitement en fin de pÃ©riode
        # ============================================
        # Assets
        cash_list = [alm.balance_sheets[time_step].get_value('assets','cash') for time_step in range (1, alm.time_horizon)]
        equity_list = [alm.balance_sheets[time_step].get_value('assets', 'equity') for time_step in range(1, alm.time_horizon)]
        bond_list = [alm.balance_sheets[time_step].get_value('assets', 'bond') for time_step in range(1, alm.time_horizon)]
        # Liabilities
        own_fund_list = [alm.balance_sheets[time_step].get_value('liabilities', 'own_fund') for time_step in range(1, alm.time_horizon)]
        capitalization_reserve_list = [alm.balance_sheets[time_step].get_value('liabilities', 'capitalization_reserve') for time_step in range(1, alm.time_horizon)]
        PPE_list = [alm.balance_sheets[time_step].get_value('liabilities', 'profit_sharing_reserve') for time_step in range(1, alm.time_horizon)]
        PRE_list = [alm.balance_sheets[time_step].get_value('liabilities', 'PRE') for time_step in range(1, alm.time_horizon)]
        PM_list = [alm.balance_sheets[time_step].get_value('liabilities', 'mathematical_provision') for time_step in range(1, alm.time_horizon)]
        # Cash flows    
        prime_list = [alm.balance_sheets[time_step].get_value('cash_flows_in', 'premium') for time_step in range(1, alm.time_horizon)]
    
        surrender_list = [alm.balance_sheets[time_step].get_value('cash_flows_out', 'surrender_value') for time_step in range(1, alm.time_horizon)]
        mortality_list = [alm.balance_sheets[time_step].get_value('cash_flows_out', 'mortality_value') for time_step in range(1, alm.time_horizon)]
    
        revenu_list = [alm.balance_sheets[time_step].get_value('cash_flows_in', 'revenu') for time_step in range(1, alm.time_horizon)]
    
        amortizing_in_list = [alm.balance_sheets[time_step].get_value('cash_flows_in', 'amortizing_value') for time_step in range(1, alm.time_horizon)]
        amortizing_out_list = [alm.balance_sheets[time_step].get_value('cash_flows_out', 'amortizing_value') for time_step in range(1, alm.time_horizon)]
        
        PMVR_in_list = [alm.balance_sheets[time_step].get_value('cash_flows_in', 'PMVR') for time_step in range(1, alm.time_horizon)]
        PMVR_out_list = [alm.balance_sheets[time_step].get_value('cash_flows_out', 'PMVR') for time_step in range(1, alm.time_horizon)]
    
        PMVR_in_rachat_list = [alm.balance_sheets[time_step].get_value('cash_flows_in', 'PMVR_rachat') for time_step in range(1, alm.time_horizon)]
        PMVR_out_rachat_list = [alm.balance_sheets[time_step].get_value('cash_flows_out', 'PMVR_rachat') for time_step in range(1, alm.time_horizon)]
    
        delta_PRE_in_list = [alm.balance_sheets[time_step].get_value('cash_flows_in', 'delta_PRE') for time_step in range(1, alm.time_horizon)]
        delta_PRE_out_list = [alm.balance_sheets[time_step].get_value('cash_flows_out', 'delta_PRE') for time_step in range(1, alm.time_horizon)]
    
        PMVR_in_deces_list = [alm.balance_sheets[time_step].get_value('cash_flows_in', 'PMVR_deces') for time_step in range(1, alm.time_horizon)]
        PMVR_out_deces_list = [alm.balance_sheets[time_step].get_value('cash_flows_out', 'PMVR_deces') for time_step in range(1, alm.time_horizon)]

        Cash_Return_in = [alm.balance_sheets[time_step].get_value('cash_flows_in', 'Cash_Return') for time_step in range(1, alm.time_horizon)]
        Cash_Return_out = [alm.balance_sheets[time_step].get_value('cash_flows_out', 'Cash_Return') for time_step in range(1, alm.time_horizon)]        
        
        PMVR_aft_res_allo_in_list  = [alm.balance_sheets[time_step].get_value('cash_flows_in', 'PMVR_aft_res_allo') for time_step in range(1, alm.time_horizon)]
        PMVR_aft_res_allo_out_list = [alm.balance_sheets[time_step].get_value('cash_flows_out', 'PMVR_aft_res_allo') for time_step in range(1, alm.time_horizon)]
    
        MVR__TF_rachat_list = [alm.balance_sheets[time_step].get_value('cash_flows_out', 'MVR_TF_residuelle_rachat') for time_step in range(1, alm.time_horizon)]
    
        MVR__TF_deces_list = [alm.balance_sheets[time_step].get_value('cash_flows_out', 'MVR_TF_residuelle_deces') for time_step in range(1, alm.time_horizon)]
        
        sum_cash_list = [alm.balance_sheets[time_step].get_cash_flow() for time_step in range(1, alm.time_horizon)]
    
        delta_own_fund_list = [alm.balance_sheets[time_step].get_value('liabilities', 'own_fund')
                               - alm.balance_sheets[time_step].get_value('liabilities', 'own_fund_0') for time_step in range(1, time_horizon)]
        delta_PPE_list = [alm.balance_sheets[time_step].get_value('liabilities', 'profit_sharing_reserve')
                          - alm.balance_sheets[time_step].get_value('liabilities', 'profit_sharing_reserve_0') for time_step in range(1, alm.time_horizon)]
        delta_Kpi_list = [alm.balance_sheets[time_step].get_value('liabilities', 'capitalization_reserve')
                          - alm.balance_sheets[time_step].get_value('liabilities', 'capitalization_reserve_0') for time_step in range(1, alm.time_horizon)]
        delta_PM_list = [alm.balance_sheets[time_step].get_value('liabilities', 'mathematical_provision')
                         - alm.balance_sheets[time_step].get_value('liabilities', 'mathematical_provision_0') for time_step in range(1, alm.time_horizon)]
        delta_PRE_list = [alm.balance_sheets[time_step].get_value('liabilities', 'PRE')
                          - alm.balance_sheets[time_step].get_value('liabilities','PRE_0') for time_step in range(1, alm.time_horizon)]
        delta_liabilities_list = [x + y + w for x,y,w in zip(delta_own_fund_list, delta_PPE_list, delta_PM_list)]

        filename = r'data\Balance_Sheet.xls'
        filename_short = r'data\Balance_Sheet_short_version.xls'
        # =========================
        # At the begining of period
        # =========================
        assets_0_dict = collections.OrderedDict()
        assets_0_dict['cash_0'] = cash_0_list
        assets_0_dict['equity_market_0'] = equity_market_0_list
        assets_0_dict['equity_book_0'] = equity_bond_0_list
        assets_0_dict['bond_market_0'] = bond_market_0_list
        assets_0_dict['bond_book_0'] = bond_book_0_list
        assets_0_dict['PMVR_action_0'] = PMVR_action_0_list
        assets_0_dict['PMVR_obligation_0'] = PMVR_obligation_0_list
        assets_0_dict['available_wealth_0'] = available_wealth_0_list
        liabilities_0_dict = collections.OrderedDict()
        liabilities_0_dict['own_fund_0'] = own_fund_0_list
        liabilities_0_dict['capitalization_reserve_0'] = capitalization_reserve_0_list
        liabilities_0_dict['PRE_0'] = PRE_0_list
        liabilities_0_dict['profit_sharing_reserve_0'] = PPE_0_list
        liabilities_0_dict['mathematical_provision_0'] = PM_0_list
        # =========================
        # After bond reinvestment
        # =========================
        assets_1_dict = collections.OrderedDict()
        assets_1_dict['cash_1'] = cash_1_list
        assets_1_dict['equity_market_1'] = equity_market_1_list
        assets_1_dict['equity_book_1'] = equity_bond_1_list
        assets_1_dict['bond_market_1'] = bond_market_1_list
        assets_1_dict['bond_book_1'] = bond_book_1_list
        assets_1_dict['PMVR_action_1'] = PMVR_action_1_list
        assets_1_dict['PMVR_obligation_1'] = PMVR_obligation_1_list
        assets_1_dict['available_wealth_1'] = available_wealth_1_list
        liabilities_1_dict = collections.OrderedDict()
        liabilities_1_dict['own_fund_1'] = own_fund_1_list
        liabilities_1_dict['capitalization_reserve_1'] = capitalization_reserve_1_list
        liabilities_1_dict['profit_sharing_reserve_1'] = PPE_1_list
        liabilities_1_dict['mathematical_provision_1'] = PM_1_list
        # ================================
        # After computing amortizing value
        # ================================
        assets_2_dict = collections.OrderedDict()
        assets_2_dict['cash_2'] = cash_2_list
        assets_2_dict['equity_market_2'] = equity_market_2_list
        assets_2_dict['equity_book_2'] = equity_bond_2_list
        assets_2_dict['bond_market_2'] = bond_market_2_list
        assets_2_dict['bond_book_2'] = bond_book_2_list
        assets_2_dict['PMVR_action_2'] = PMVR_action_2_list
        assets_2_dict['PMVR_obligation_2'] = PMVR_obligation_2_list
        assets_2_dict['available_wealth_2'] = available_wealth_2_list
        liabilities_2_dict = collections.OrderedDict()
        liabilities_2_dict['own_fund_2'] = own_fund_2_list
        liabilities_2_dict['capitalization_reserve_2'] = capitalization_reserve_2_list
        liabilities_2_dict['profit_sharing_reserve_2'] = PPE_2_list
        liabilities_2_dict['mathematical_provision_2'] = PM_2_list
        # ================================
        # After paying surrenders out
        # ================================
        assets_3_dict = collections.OrderedDict()
        assets_3_dict['cash_3'] = cash_3_list
        assets_3_dict['equity_market_3'] = equity_market_3_list
        assets_3_dict['equity_book_3'] = equity_bond_3_list
        assets_3_dict['bond_market_3'] = bond_market_3_list
        assets_3_dict['bond_book_3'] = bond_book_3_list
        assets_3_dict['PMVR_action_3'] = PMVR_action_3_list
        assets_3_dict['PMVR_obligation_3'] = PMVR_obligation_3_list
        assets_3_dict['available_wealth_3'] = available_wealth_3_list
        liabilities_3_dict = collections.OrderedDict()
        liabilities_3_dict['own_fund_3'] = own_fund_3_list
        liabilities_3_dict['capitalization_reserve_3'] = capitalization_reserve_3_list
        liabilities_3_dict['profit_sharing_reserve_3'] = PPE_3_list
        liabilities_3_dict['mathematical_provision_3'] = PM_3_list
        # ================================
        # After paying mortalities out
        # ================================
        assets_4_dict = collections.OrderedDict()
        assets_4_dict['cash_4'] = cash_4_list
        assets_4_dict['equity_market_4'] = equity_market_4_list
        assets_4_dict['equity_book_4'] = equity_bond_4_list
        assets_4_dict['bond_market_4'] = bond_market_4_list
        assets_4_dict['bond_book_4'] = bond_book_4_list
        assets_4_dict['PMVR_action_4'] = PMVR_action_4_list
        assets_4_dict['PMVR_obligation_4'] = PMVR_obligation_4_list
        assets_4_dict['available_wealth_4'] = available_wealth_4_list
        liabilities_4_dict = collections.OrderedDict()
        liabilities_4_dict['own_fund_4'] = own_fund_4_list
        liabilities_4_dict['capitalization_reserve_4'] = capitalization_reserve_4_list
        liabilities_4_dict['profit_sharing_reserve_4'] = PPE_4_list
        liabilities_4_dict['mathematical_provision_4'] = PM_4_list
        # ==================================
        # After computing distributed wealth
        # ==================================
        assets_5_dict = collections.OrderedDict()
        assets_5_dict['richesse_min'] = richesse_min_list
        assets_5_dict['richesse_max'] = richesse_max_list
        assets_5_dict['richesse_TMG'] = richesse_TMG_list
        assets_5_dict['richesse_voulue'] = richesse_voulue_list
        assets_5_dict['richesse_distribuee'] = richesse_distribuee_list
        assets_5_dict['equity_market_5'] = equity_market_5_list
        assets_5_dict['bond_market_5'] = bond_market_5_list
        assets_5_dict['PMVR_action_5'] = PMVR_action_5_list
        assets_5_dict['PMVR_obligation_5'] = PMVR_obligation_5_list
        assets_5_dict['available_wealth_5'] = available_wealth_5_list
        assets_5_dict['abondement'] = abondement_list
        liabilities_5_dict = collections.OrderedDict()
        liabilities_5_dict['own_fund_4'] = own_fund_5_list
        liabilities_5_dict['capitalization_reserve_4'] = capitalization_reserve_5_list
        liabilities_5_dict['profit_sharing_reserve_4'] = PPE_5_list
        liabilities_5_dict['mathematical_provision_4'] = PM_5_list
        
        assets_dict = collections.OrderedDict()
        assets_dict['Cash'] = cash_list
        assets_dict['Equity'] = equity_list
        assets_dict['Bond'] = bond_list
        liabilities_dict = collections.OrderedDict()
        liabilities_dict['Own_Fund'] = own_fund_list
        liabilities_dict['Capitalization_Reserve'] = capitalization_reserve_list
        liabilities_dict['Profit_Sharing_Reserve'] = PPE_list
        liabilities_dict['PRE'] = PRE_list
        liabilities_dict['Mathematical_Provision'] = PM_list
        delta_liabilities_dict = collections.OrderedDict()
        delta_liabilities_dict['Delta_Liabilities'] = delta_liabilities_list
        
        cash_in_dict = collections.OrderedDict()
        cash_in_dict['Prime'] = prime_list
        cash_in_dict['Revenu'] = revenu_list
        cash_in_dict['Amortizing_Value'] = amortizing_in_list
        cash_in_dict['PMVR'] = PMVR_in_list
        cash_in_dict['PMVR_rachat'] = PMVR_in_rachat_list
        cash_in_dict['PMVR_deces'] = PMVR_in_deces_list
        cash_in_dict['Cash_Return'] = Cash_Return_in
        cash_in_dict['PMVR_aft_res_allo'] = PMVR_aft_res_allo_in_list
        cash_in_dict['delta_PRE'] = delta_PRE_in_list
        
        cash_out_dict = collections.OrderedDict()
        cash_out_dict['Surrender_Value'] = surrender_list
        cash_out_dict['Mortality_Value'] = mortality_list
        cash_out_dict['Amortizing_Value'] = amortizing_out_list
        cash_out_dict['PMVR'] = PMVR_out_list
        cash_out_dict['PMVR_rachat'] = PMVR_out_rachat_list
        cash_out_dict['PMVR_deces'] = PMVR_out_deces_list
        cash_out_dict['Cash_Return'] = Cash_Return_out
        cash_out_dict['PMVR_aft_res_allo'] = PMVR_aft_res_allo_out_list
        cash_out_dict['MVR_rachat'] = MVR__TF_rachat_list
        cash_out_dict['MVR_deces'] = MVR__TF_deces_list
        cash_out_dict['delta_PRE'] = delta_PRE_out_list
        sum_cash_dict = collections.OrderedDict()
        sum_cash_dict['Sum_of_cash_flows'] = sum_cash_list
        # ======================
        # Build Up Balance Sheet
        # ======================
        balance_sheet = collections.OrderedDict()
        balance_sheet['Assets_0'] = assets_0_dict
        balance_sheet['Liabilities_0'] = liabilities_0_dict
        balance_sheet['Assets_1'] = assets_1_dict
        balance_sheet['Liabilities_1'] = liabilities_1_dict
        balance_sheet['Assets_2'] = assets_2_dict
        balance_sheet['Liabilities_2'] = liabilities_2_dict
        balance_sheet['Assets_3'] = assets_3_dict
        balance_sheet['Liabilities_3'] = liabilities_3_dict
        balance_sheet['Assets_4'] = assets_4_dict
        balance_sheet['Liabilities_4'] = liabilities_4_dict
        balance_sheet['Assets_5'] = assets_5_dict
        balance_sheet['Liabilities_5'] = liabilities_5_dict
        balance_sheet['Assets'] = assets_dict
        balance_sheet['Liabilities'] = liabilities_dict
        balance_sheet['Delta_Liabilities'] = delta_liabilities_dict
        balance_sheet['Cash_Flows_In'] = cash_in_dict
        balance_sheet['Cash_Flows_Out'] = cash_out_dict
        balance_sheet['Sum_of_cash_flows'] = sum_cash_dict
        
        balance_sheet_short = collections.OrderedDict()
        balance_sheet_short['Assets'] = assets_dict
        balance_sheet_short['Liabilities'] = liabilities_dict
        balance_sheet_short['Cash Flows coming in'] = cash_in_dict
        balance_sheet_short['Cash Flows going out'] = cash_out_dict
        
        et.output_excel(file_name = filename, dictionary = balance_sheet)
        et.output_excel(file_name = filename_short, dictionary = balance_sheet_short) 
    
    return output, Asset0-output